#!/bin/sh

#
# a cron script that replicates zfs datasets to a remote machine
#

PATH=/bin:/usr/bin:/sbin

version="1.1"

ec=0
quiet=

unset zshadow_tags \
    zshadow_tag \
    zshadow_tag_cfg \
    zshadow_tag_scheme \
    zshadow_tag_target

zshadow_help="usage: zshadow <command> <args>\n\
    version: $version\n\
    \tzshadow help [command]:\n\
    \t - prints this help message or the help for any of the following sub commands\n\
    \tzshadow create [tag name] [-s scheme] [-o option=value] ...\n\
    \t - create a new tag configuration\n\
    \tzshadow update [tag name] [-s scheme] [-o option=value] ...\n\
    \t - update an existing tag configuration\n\
    \tzshadow tag [dataset] [tag name] [-m mode]\n\
    \t - tag a dataset\n\
    \tzshadow send [tag name] ...\n\
    \t - send a tag or tags\n\
    \tzshadow list [tag name] ...\n\
    \t - list a tag or tags and their datasets\n\
    \tzshadow show [tag name] ...\n\
    \t - show a tag or tag's configuration options\n\
    \tzshadow untag [dataset] [tag name]\n\
    \t - untag a dataset\n\
    \tzshadow reset [dataset] [tag name]\n\
    \t - reset a dataset back to its unsent state\n\
    \tzshadow delete [tag name]\n\
    \t - delete a tag\n"

zshadow_create_help="usage: zshadow create [tag name] [-s scheme] \
    [-o option=value] ...\n\
    \tCreates a new tag with the given name and scheme.\n\
    \tThe tag name is a unique id and the scheme is one of the following:\n\
    \t ssh: sends tagged datasets to a remote host\n\
    \n\
    \tThe set of options supported are dependent on the scheme chosen.\n\
    \n\
    \tssh options:\n\
    \t target: the remote dataset that will serve as the parent dataset\n\
    \t host: the host name or address of the remote machine\n\
    \t port: the port number of the sshd instance on the remote machine\n\
    \t user: the user name to login in as on the remot emachine\n\
    \n\
    \tExample:\n\
    \t zshadow create mytag -s ssh -o target=tank/shadows \\ \n\
    \t\t -o host=backups.example.com\n\
    \n\
    \t The above will create tag called 'mytag'. Datasets tagged\n\
    \t with the 'mytag' tag will be sent via ssh to the tank/shadows\n\
    \t dataset that resides on backups.example.com\n"

zshadow_update_help="usage: zshadow update [tag name] [-s scheme] \
    [-o option=value] ...\n\
    \tUpdates an existing tag with the given list of options.\n\
    \tsee 'zshadow help create' for the breakdown of options."

zshadow_tag_help="usage: zshadow tag [dataset] [tag name] [-m mode]\n\
    \tTags a dataset with the specified tag. This causes the dataset\n\
    \t(and potentially its children) to be sent when that tag is sent.\n\
    \n\
    \tThe tag command takes an optional 'mode' flag that can be used\n\
    \tto specify how the tag is applied to the dataset.\n\
    \n\
    \tValid tag modes:\
    \n\
    \t send: this tag and all children datasets will be sent when\n\
    \t\tthis tag is sent. Any children with this tag set to 'ignore'\n\
    \t\tmode will NOT be sent with this tag.\n\
    \t ignore: this tag and all children datasets will NOT be sent\n\
    \t\twhen this tag is sent"

zshadow_send_help="usage: zshadow send [--quiet] [tag name] ...\n\
    \tSends each specified tag's set of datasets to their destination\n\
    \n\
    \tExamples\n\
    \t zshadow send\n\
    \t\tsend all tags to their configured destinations\n\
    \t zshadow send tag1 tag2\n\
    \t\tsend datasets tagged with tag1 and tag2"

zshadow_list_help="usage: zshadow list [tag name] ...\n\
    \tList each tag and their datasets\n\
    \n\
    \tExamples\n\
    \t zshadow list\n\
    \t\tlist all tags and their datasets\n\
    \t zshadow list tag1 tag2\n\
    \t\tlist datasets tagged with tag1 or tag2"

zshadow_show_help="usage zshadow show [tag name] ...\n\
    \tPrint the configuration options for each tag\n\
    \n\
    \tExamples\n\
    \t zshadow show\n\
    \t\tshow configuration options for all tags\n\
    \t zshadow show tag1 tag2\n\
    \t\tshow configuration options for tag1 and tag2"

zshadow_untag_help="usage zshadow untag [dataset] [tag name]\n\
    \tClear the specified tag from the given dataset.\n\
    \n\
    \tNote: this means that the dataset will no longer have any\n\
    \texplicit tagging information for that tag, and will instead\n\
    \tinherit any tagging values from its parent datasets. For example\n\
    \tif tank/files and tank/files/important are both tagged with 'tag1'\n\
    \tuntagging tank/files/important won't have any effect, as tag1\n\
    \tstill applies to tank/files.\n\
    \n\
    \tThis can be used in interesting scenarios, to for example block\n\
    \ta child dataset from sending using tag mode 'ignore', and then\n\
    \tlater untagging that ignore tag so it can start being sent."

zshadow_reset_help="usage zshadow reset [dataset] [tag]\n\
    \tReset the specified tag for the given dataset.\n\
    \n\
    \tWARNING: This will destroy the snapshot used for sending the\n\
    \tspecified dataset, so on the next send of the specified tag the\n\
    \tdataset will have it's target wiped, and the entire dataset will be\n\
    \nresent. Only use this as a last resort!"

zshadow_delete_help="usage zshadow delete [tag]\n\
    \tDelete a tag\
    \n\
    \tWARNING: this will delete the configuration for the tag\n\
    \t\tas well as any snapshots created with that tag."

send_dataset()
{
    local dataset="$1"

    # blindly try to create the base snapshot, then check the
    # return code to branch on either sending the initial data, or sending
    # an incremental stream.
    zfs snapshot $dataset@shadow.$zshadow_tag >/dev/null 2>&1

    if [ $? == 0 ]
    then
        # the base snapshot was just created, destroy any remote data
        # and start fresh
        reset_target $dataset > /dev/null 2>&1
        zfs destroy $dataset@shadow.$zshadow_tag.delta > /dev/null 2>&1 

        local now=$(date +%s)
        local send_output
        send_output=$(send_snapshot base $dataset)

        if [ $? == 0 ]
        then
            zfs set zshadow:sent=$now $dataset@shadow.$zshadow_tag > /dev/null 2>&1

            local time=$(echo "$send_output" | sed 's/|.*$//')
            local baud=$(echo "$send_output" | sed 's/^.*|//')

            log "  sent $dataset@shadow.$zshadow_tag ($time seconds at $baud bytes/sec)"
        else
            err "  failed to send snapshot '$dataset@shadow.$zshadow_tag', destroying newly created base snapshot - output: $send_output"

            # destroy the newly created base snapshot so that the next time
            # this script is run, the base snapshot will be re-created and
            # re-sent
            zfs destroy $dataset@shadow.$zshadow_tag > /dev/null 2>&1
        fi
    else
        # first check to see if there already is an existing delta snapshot. If
        # there is, then this means we were unable to clean up the remote host's snapshots
        # and should do so now. Otherwise, create the delta snapshot and send.

        # try up to 6 times to clean up any existing delta snapshots
        for attempt in 1 2 3 4 5 6
        do
            zfs list -H -o name $dataset@shadow.$zshadow_tag.delta >/dev/null 2>&1

            if [ $? != 0 ]
            then
                # there aren't any delta snapshots on this machine, so break out of the loop
                break
            else
                log "  delta snapshot $dataset@shadow.$zshadow_tag.delta still exists, updating remote snapshots (attempt #$attempt)"

                update_snapshots $dataset 

                # on the off chance that we failed to update the snapshots again,
                # sleep 10 seconds so that each attempt is made 10 seconds apart
                sleep 10
            fi
        done

        local snapshot_output=$(zfs snapshot $dataset@shadow.$zshadow_tag.delta 2>&1)

        if [ $? != 0 ]
        then
            # despite trying to clean up any left over snapshots, we still
            # failed to create a snapshot. go ahead and abort for now, with the
            # hope that a later invocation of this script will have success
            err "  failed to create the delta snapshot '$dataset@shadow.$zshadow_tag.delta' - output: $snapshot_output"

            # move on to the next dataset
            continue
        fi

        local now=$(date +%s)
        local send_output
        send_output=$(send_snapshot delta $dataset)

        if [ $? == 0 ]
        then
            zfs set zshadow:sent=$now $dataset@shadow.$zshadow_tag.delta > /dev/null 2>&1

            local time=$(echo "$send_output" | sed 's/|.*$//')
            local baud=$(echo "$send_output" | sed 's/^.*|//')
            log "  sent $dataset@shadow.$zshadow_tag.delta ($time seconds at $baud bytes/sec)"

            update_snapshots $dataset 
        else
            err "  failed to send $dataset@shadow.$zshadow_tag.delta - output: $send_output"

            # since we couldn't send it, just destroy it. If this
            # script gets invoked again the delta snapshot will just be recreated.
            zfs destroy $dataset@shadow.$zshadow_tag.delta
        fi
    fi
}

update_snapshots()
{
    local dataset="$1"

    local destroy_output
    destroy_output=$(destroy_target_base $dataset)

    if [ $? != 0 ]
    then
        err "      failed to destroy the remote snapshot - output: $destroy_output"
    else
        local rename_output
        rename_output=$(rename_target_delta $dataset)

        if [ $? == 0 ]
        then
            # process local snapshots
            zfs destroy $dataset@shadow.$zshadow_tag >/dev/null 2>&1

            zfs rename $dataset@shadow.$zshadow_tag.delta $dataset@shadow.$zshadow_tag >/dev/null 2>&1
        else
            err "      failed to rename the remote snapshot - output: $rename_output"
        fi
    fi
}

reset_target()
{
    local snapshots snapshot

    local dataset="$1"

    local pool="$(echo $dataset | sed 's|\([^/]*\)/.*|\1|')"

    case "$zshadow_tag_scheme" in
        ssh|local)
            if [ "$zshadow_tag_scheme" == "ssh" ]
            then
                ssh $zshadow_ssh_args zfs create "$zshadow_tag_target/$pool" 
            else
                zfs create "$zshadow_tag_target/$pool" 
            fi

            if [ "$zshadow_tag_scheme" == "ssh" ]
            then
                snapshots=$(ssh $zshadow_ssh_args zfs list -H -o name -d 1 -t snapshot "$zshadow_tag_target/$dataset")
            else
                snapshots=$(zfs list -H -o name -d 1 -t snapshot "$zshadow_tag_target/$dataset")
            fi

            for snapshot in $snapshots
            do
                if [ "$zshadow_tag_scheme" == "ssh" ]
                then
                    ssh $zshadow_ssh_args "zfs destroy $snapshot"
                else
                    zfs destroy $snapshot
                fi
            done
            ;;
        *)
            output="send scheme not supported"
            ret=1
            ;;
    esac

    echo $output

    return $ret
}

send_snapshot()
{
    local mode dataset output ret

    mode="$1"
    dataset="$2"

    local pool="$(echo $dataset | sed 's|\([^/]*\)/.*|\1|')"

    case "$zshadow_tag_scheme" in
        ssh|local)
            case $mode in
                base)
                    if [ "$zshadow_tag_scheme" == "ssh" ]
                    then
                        output=$(zfs send $dataset@shadow.$zshadow_tag | ssh $zshadow_ssh_args "zfs recv -duvF $zshadow_tag_target/$pool" 2>&1)
                        ret=$?
                    else
                        output=$(zfs send $dataset@shadow.$zshadow_tag | zfs recv -duvF $zshadow_tag_target/$pool 2>&1)
                        ret=$?
                    fi
                    ;;
                delta) 
                    if [ "$zshadow_tag_scheme" == "ssh" ]
                    then
                        output=$(zfs send -i shadow.$zshadow_tag $dataset@shadow.$zshadow_tag.delta | ssh $zshadow_ssh_args "zfs recv -duv $zshadow_tag_target/$pool" 2>&1)
                        ret=$?
                    else
                        output=$(zfs send -i shadow.$zshadow_tag $dataset@shadow.$zshadow_tag.delta | zfs recv -duv $zshadow_tag_target/$pool 2>&1)
                        ret=$?
                    fi
                    ;;
                *)
                    output="unrecognized send mode"
                    ret=1
                    ;;
            esac

            if [ $ret == 0 ]
            then
                local time=$(parse_send_duration "$output")
                local baud=$(parse_send_speed "$output")

                output="$time|$baud"
            fi
            ;;
        *)
            output="send scheme not supported"
            ret=1
            ;;
    esac

    echo $output

    return $ret
}

destroy_target_base()
{
    local output ret

    local dataset="$1"

    case "$zshadow_tag_scheme" in
        ssh)
            output=$(ssh $zshadow_ssh_args zfs destroy $zshadow_tag_target/$dataset@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        local)
            output=$(zfs destroy $zshadow_tag_target/$dataset@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        *)
            output="send scheme not supported"
            ret=1
            ;;
    esac

    echo $output

    return $ret
}

rename_target_delta()
{
    local output ret

    local dataset="$1"

    case "$zshadow_tag_scheme" in
        ssh)
            output=$(ssh $zshadow_ssh_args zfs rename $zshadow_tag_target/$dataset@shadow.$zshadow_tag.delta $zshadow_tag_target/$dataset@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        local)
            output=$(zfs rename $zshadow_tag_target/$dataset@shadow.$zshadow_tag.delta $zshadow_tag_target/$dataset@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        *)
            output="send scheme not supported"
            ret=1
            ;;
    esac

    echo $output

    return $ret
}

send_tag()
{
    local tag="$1"
    local dataset

    load_tag "$tag"

    [ $? == 0 ] || exerr "invalid tag configuration for '$tag'"

    lock "$tag" 

    if [ $? != 0 ]
    then
        log "zshadow is already sending '$tag', skipping"

        return 0
    fi

    local datasets=$(get_datasets_for_tag "$tag")

    for dataset in $datasets
    do
        send_dataset "$dataset"
    done

    unlock "$tag"
}

load_tags()
{
    echo "$1" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9_\-]*$' || \
    if [ -z "$zshadow_tags" ]
    then
        zshadow_tags=$(zfs get -H -s local -t filesystem -o property all | grep '^zshadow:[a-zA-Z0-9][a-zA-Z0-9_\-]*\.cfg$' | sed -e 's/^zshadow:\([a-zA-Z0-9][a-zA-Z0-9_\-]*\)\.cfg$/\1/' | sort | uniq | tr '\n' ' ')
    fi
}

load_tag()
{
    if [ "$zshadow_tag" != "$1" ]
    then
        zshadow_tag="$1"
        zshadow_tag_cfg=$(get_cfg $1)

        parse_tag_cfg "$zshadow_tag_cfg"
    fi
}

check_tag()
{
    local check_tag="$1"
    local tag

    load_tags

    for tag in $zshadow_tags
    do
        if [ $check_tag == $tag ]
        then
            return 0
        fi
    done

    return 1
}

get_cfg()
{
    local tag=$1

    zfs get -H -s local -o value zshadow:$tag.cfg | head -n 1
}

get_cfg_scheme()
{
    echo "$1" | sed -e 's/\([^|]*\)|.*/\1/'
}

get_cfg_option()
{
    echo "$1" | grep -o "|$2=[^|]*|" | sed -e "s/|$2=\([^|]*\)|/\1/"
}

get_cfg_options()
{
    local cfg="$1"

    echo $cfg | \
        grep -o '|[^=]*=' | \
        sed -e 's/^.//' -e 's/.$//' | \
        tr '\n' ' '
}

parse_tag_cfg()
{
    unset zshadow_ssh_args zshadow_ssh_gzip

    zshadow_tag_scheme=$(get_cfg_scheme $1)

    [ ! -z "$zshadow_tag_scheme" ] || return 1

    case $zshadow_tag_scheme in
        local)
            local target=$(get_cfg_option "$1" target)

            [ ! -z "$target" ] || return 1

            zshadow_tag_target="$target"
            ;;
        ssh)
            local target=$(get_cfg_option "$1" target)
            local host=$(get_cfg_option "$1" host)
            local port=$(get_cfg_option "$1" port)
            local user=$(get_cfg_option "$1" user)
            local gzip=$(get_cfg_option "$1" gzip)

            [ ! -z "$target" ] || return 1

            zshadow_tag_target="$target"

            [ ! -z "$host" ] || return 1

            zshadow_ssh_args="$host"

            [ -z "$user" ] || zshadow_ssh_args=$(echo "$user@$zshadow_ssh_args")

            [ -z "$port" ] || zshadow_ssh_args=$(echo "$zshadow_ssh_args -p $port")

            [ "$gzip" == "yes" ] && zshadow_ssh_gzip="yes"
            ;;
        *)
            return 1
    esac

    return 0
}

get_datasets_for_tag()
{
    local tag="$1"

    zfs get -H -t filesystem -o name,value zshadow:$tag | grep '[[:space:]]send' | awk '{ print $1 }'
}

parse_tags()
{
    load_tags

    local tags=""

    if [ $# == 0 ]
    then
        tags=$zshadow_tags
    else
        while [ $# -gt 0 ]
        do
            check_tag "$1" || exerr "tag $1 does not exist"

            if [ -z "$tags" ]
            then
                tags="$1"
            else
                tags=$(echo "$tags $1")
            fi

            shift
        done
    fi

    echo $tags
}

parse_send_duration()
{
    local time
    time=$(echo $1 | sed 's/.* \([0-9]*\) seconds.*/\1/')

    echo $time | grep -qE '[0-9]+'

    if [ $? == 0 ]
    then
        echo $time
    else
        echo 0
    fi
}

parse_send_speed()
{
    local rate=$(echo $1 | sed 's/.*(\([0-9.]*\)[A-Z]*\/sec)/\1/')
    local unit=$(echo $1 | sed 's/.*([0-9.]*\([A-Z]*\)\/sec)/\1/')
    local baud

    case $unit in
        B)
            baud=$rate
            ;;
        KB)
            baud=$(echo "$rate * 1000" | bc -l)
            ;;
        MB)
            baud=$(echo "$rate * 1000 * 1000" | bc -l)
            ;;
        GB)
            baud=$(echo "$rate * 1000 * 1000 * 1000" | bc -l)
            ;;
        *)
            baud=0
            ;;
    esac

    echo $baud
}

lock()
{
    local pid=$(pgrep -F "/var/run/zshadow."$tag".pid" 2>/dev/null)

    if [ ! -z $pid ]
    then
        return 1
    fi

    echo $$ > "/var/run/zshadow."$tag".pid"

    return 0
}

unlock()
{
    rm "/var/run/zshadow."$tag".pid" >/dev/null 2>&1
    return 0
}

printmsg()
{
    echo "$1"
    logger -t zshadow "$1"
}

log()
{
    if [ -z $quiet ]
    then
        printmsg "$1"
    fi
}

err()
{
    ec=1
    >&2 printmsg "_FAILURE_: $1"
}

exerr()
{
    echo -e "$*" >&2
    exit 1
}

########## END FUNCTION DECLARATIONS ##########

case "$1" in
#
# create - create a tag and its properties
# update - change a tag and its properties
#
create|update)
    action="$1"
    shift

    if [ $# -lt 3 ]
    then
        [ "$action" == "create" ] && exerr $zshadow_create_help
        exerr $zshadow_update_help
    fi

    echo "$1" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9_\-]*$' || \
        exerr "tag names can only contain a-z, 0-9, -, _ and must not start with - or _"

    tag="$1"
    options=""

    if [ "$action" == "create" ]
    then
        check_tag "$tag" && \
            exerr "tag '$tag' already exists, did you mean 'update'?"
    else
        check_tag "$tag" || \
            exerr "tag '$tag' does not exist, use 'create' to create it"

        lock "$tag" || \
            exerr "tag '$tag' currently locked for sending"
    fi

    shift; while getopts :s:t:o: arg; do case ${arg} in 
      s) tag_scheme=${OPTARG};;
      o)
          echo ${OPTARG} | grep -Eq '^[a-zA-Z]+=[^|]+$' || \
              exerr "a tag option must be of the form name=value, where value does not contain the '|' character"

          options=$(echo "$options${OPTARG}|")
          ;;
      *)
        [ "$action" == "create" ] && exerr $zshadow_create_help
        exerr $zshadow_update_help
        ;;
    esac; done; shift $(( ${OPTIND} - 1 ))

    [ ! -z "$tag_scheme" ] || \
        exerr "the scheme is requried (-s <scheme>)"

    tag_cfg="$tag_scheme|$options"

    parse_tag_cfg "$tag_cfg" || \
        exerr "invalid options list for $tag_scheme"

    # when creating a new tag, add the tag properties to every pool
    # so it's a global property regardless of what pools are connected
    all_pools=$(zpool list -H -o name) || \
        exerr "failed to find any ZFS pools"

    output=$(zfs set zshadow:$tag.cfg=$tag_cfg $all_pools 2>&1) || \
        exerr "failed to create tag $tag, $output"

    if [ "$action" == "create" ]
    then
        echo "created tag '$tag'"
    else
        echo "updated tag '$tag'"
    fi

    ;;

#
# delete - delete a tag
#
delete)
    shift

    [ $# == 1 ] || exerr $zshadow_delete_help

    tag="$1"

    check_tag "$tag" || \
        exerr "tag '$tag' does not exist"

    lock "$tag" || \
        exerr "tag '$tag' currently locked for sending"

    all_pools=$(zpool list -H -o name) || \
        exerr "failed to find any ZFS pools"

    output=$(zfs inherit zshadow:$tag.cfg $all_pools 2>&1) || \
        exerr "failed to remove tag configuration for $tag, $output"

    all_sets=$(zfs get -H -s local -o name zshadow:$tag)

    if [ ! -z "$all_sets" ]
    then
        output=$(zfs inherit zshadow:$tag $all_sets 2>&1) || \
            exerr "failed to remove tag $tag, $output"
    fi

    all_snaps=$(zfs list -H -t snapshot -o name | grep "@shadow.$tag$")

    for snap in $all_snaps
    do
        output=$(zfs destroy $snap 2>&1) || \
            echo "failed to destroy snapshot $snap, continuing on to next snapshot"
    done

    ;;

#
# tag - tag a dataset for sending
#
tag)
    shift

    [ $# -gt 1 ] || exerr $zshadow_tag_help

    dataset="$1"
    tag="$2"

    zfs list -H -o name "$dataset" > /dev/null 2>&1 || \
        exerr "dataset '$dataset' not found"

    check_tag "$tag" || \
        exerr "tag '$tag' not found"

    shift; shift;

    tag_mode='send'

    while getopts :m: arg; do case ${arg} in 
      m)
          case "${OPTARG}" in
              send)
                  tag_mode='send'
                  ;;
              ignore)
                  tag_mode='ignore'
                  ;;
              *)
                  exerr $zshadow_tag_help
                  ;;
          esac
            ;;
      *)
          exerr $zshadow_tag_help
          ;;
    esac; done; shift $(( ${OPTIND} - 1 ))

    output=$(zfs set "zshadow:$tag=$tag_mode" "$dataset" 2>&1) || \
        exerr "failed to tag dataset '$dataset' with '$tag', $output"

    echo "added '$tag' tag to '$dataset"

    ;;

#
# untag - remove a tag from a dataset
#
untag)
    shift

    [ $# -gt 1 ] || exerr $zshadow_untag_help

    dataset="$1"
    tag="$2"

    zfs list -H -o name "$dataset" > /dev/null 2>&1 || \
        exerr "dataset '$dataset' not found"

    check_tag "$tag" || \
        exerr "tag '$tag' not found"

    output=$(zfs inherit zshadow:$tag $dataset > /dev/null 2>&1) || \
        exerr "failed to remove '$tag' from '$dataset'"

    echo "removed '$tag' tag from '$dataset'"

    ;;

#
# reset - reset a dataset's state for a given tag
#
reset)
    shift

    [ $# == 2 ] || exerr $zshadow_reset_help

    dataset="$1"
    tag="$2"

    zfs list -H -o name "$dataset" > /dev/null 2>&1 || \
        exerr "dataset '$dataset' not found"

    check_tag "$tag" || \
        exerr "tag '$tag' not found"

    zfs destroy "$dataset@shadow.$tag.delta" > /dev/null 2>&1
    output=$(zfs destroy "$dataset@shadow.$tag" 2>&1) || \
        exerr "failed to reset '$dataset', $output"

    echo "reset '$tag' tag on '$dataset'"

    ;;

#
# list - list all tags
#
list)
    shift

    list_tags=$(parse_tags $@) || exit 1

    max_tag_len=0
    max_ds_len=0

    for tag in $list_tags
    do
        tag_len=$(echo "$tag" | wc -c | tr -s ' ')

        [ $tag_len -lt $max_tag_len ] || max_tag_len=$tag_len

        datasets=$(get_datasets_for_tag $tag)

        for dataset in $datasets
        do
            ds_len=$(echo "$dataset" | wc -c | tr -s ' ')

            [ $ds_len -lt $max_ds_len ] || max_ds_len=$ds_len
        done
    done

    printf "%-${max_tag_len}s  %-${max_ds_len}s  %s\n" 'TAG' 'DATASET' 'LAST SENT'

    for tag in $list_tags
    do
        datasets=$(get_datasets_for_tag $tag)

        [ ! -z "$datasets" ] || printf "%-${max_tag_len}s  %-${max_ds_len}s  %s\n" $tag '-' '-'

        for dataset in $datasets
        do
            last_sent=$(zfs get -H -o value zshadow:sent $dataset@shadow.$tag 2>&1)
            last_sent_date=$(date -r $last_sent 2>&1) || last_sent_date='-'

            printf "%-${max_tag_len}s  %-${max_ds_len}s  %s\n" "$tag" "$dataset" "$last_sent_date"
        done
    done
    ;;

#
# show - show a tag and all its properties
#
show)
    shift

    show_tags=$(parse_tags $@) || exit 1

    max_tag_len=3
    max_name_len=6

    for tag in $show_tags
    do
        tag_len=$(echo "$tag" | wc -c | tr -s ' ')

        [ $tag_len -lt $max_tag_len ] || max_tag_len=$tag_len

        cfg=$(get_cfg $tag)
        options=$(get_cfg_options $cfg)

        for option in $options
        do
            name_len=$(echo "$option" | wc -c | tr -s ' ')

            [ $name_len -lt $max_name_len ] || max_name_len=$name_len
        done
    done

    printf "%-${max_tag_len}s  %-${max_name_len}s  %s\n" 'TAG' 'OPTION' 'VALUE'

    for tag in $show_tags
    do
        cfg=$(get_cfg $tag)
        options=$(get_cfg_options $cfg)
        scheme=$(get_cfg_scheme $cfg)

        printf "%-${max_tag_len}s  %-${max_name_len}s  %s\n" $tag 'scheme' $scheme

        for option in $options
        do
            value=$(get_cfg_option $cfg $option)
            printf "%-${max_tag_len}s  %-${max_name_len}s  %s\n" $tag $option $value
        done
    done
    ;;

#
# send - send datasets somewhere
#
send)
    shift

    if [ "$1" == "--quiet" ]
    then
        shift
        quiet=1
    fi

    send_tags=$(parse_tags $@) || exit 1

    log "started processing datasets at $(date)"

    for tag in $send_tags
    do
        send_tag $tag
    done

    log "finished processing datasets at $(date)"
    ;;

#
# help - print help info
#
help)
    shift

    [ $# -lt 2 ] || exerr $zshadow_help

    case $1 in
        create)
            exerr $zshadow_create_help
            ;;
        update)
            exerr $zshadow_update_help
            ;;
        tag)
            exerr $zshadow_tag_help
            ;;
        send)
            exerr $zshadow_send_help
            ;;
        list)
            exerr $zshadow_list_help
            ;;
        show)
            exerr $zshadow_show_help
            ;;
        untag)
            exerr $zshadow_untag_help
            ;;
        reset)
            exerr $zshadow_reset_help
            ;;
        delete)
            exerr $zshadow_delete_help
            ;;
        *)
            exerr $zshadow_help
            ;;
    esac
    ;;

#
# error - unrecognized command
#
*)
    exerr $zshadow_help
    ;;
esac


exit $ec
