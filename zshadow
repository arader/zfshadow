#!/bin/sh

#
# a cron script that replicates zfs datasets to a remote machine
#

PATH=/bin:/usr/bin:/sbin

version="0.1"

ec=0

unset zshadow_tags zshadow_tag zshadow_tag_cfg zshadow_tag_scheme zshadow_tag_target

send_dataset()
{
    local dataset="$1"

    log "  started processing $dataset at $(date)"

    # calculate what the remote target's name is
    local target_path="$zshadow_tag_target$(echo $dataset | sed 's|^[^/]*||')"

    # blindly try to create the base snapshot, then check the
    # return code to branch on either sending the initial data, or sending
    # an incremental stream.
    zfs snapshot $dataset@shadow.$zshadow_tag >/dev/null 2>&1

    if [ $? == 0 ]
    then
        # the base snapshot was just created, destroy any remote data
        # and start fresh
        log "    initial snapshot $dataset@shadow.$zshadow_tag created"

        destroy_target_snapshots "$target_path" > /dev/null 2>&1
        zfs destroy $dataset@shadow.$zshadow_tag.delta > /dev/null 2>&1 

        # if the local dataset is the root dataset of the pool, then the
        # above will have destroyed the target, so re-create it.
        if [ "$target_path" == "$zshadow_tag_target" ]
        then
            create_target "$target_path"
        fi

        log "    sending $dataset@shadow.$zshadow_tag to $zshadow_tag_target"

        local send_output
        send_output=$(send_base_to_target -F "$dataset")

        if [ $? == 0 ]
        then
            log "    successfully sent snapshot '$dataset@shadow.$zshadow_tag'"
        else
            err "    failed to send snapshot '$dataset@shadow.$zshadow_tag', destroying newly created base snapshot - output: $send_output"

            # destroy the newly created base snapshot so that the next time
            # this script is run, the base snapshot will be re-created and
            # re-sent
            zfs destroy $dataset@shadow.$zshadow_tag > /dev/null 2>&1
        fi
    else
        # first check to see if there already is an existing delta snapshot. If
        # there is, then this means we were unable to clean up the remote host's snapshots
        # and should do so now. Otherwise, create the delta snapshot and send.

        # try up to 6 times to clean up any existing delta snapshots
        for attempt in 1 2 3 4 5 6
        do
            zfs list -H -o name $dataset@shadow.$zshadow_tag.delta >/dev/null 2>&1

            if [ $? != 0 ]
            then
                # there aren't any delta snapshots on this machine, so break out of the loop
                break
            else
                log "    delta snapshot $dataset@shadow.$zshadow_tag.delta still exists, updating remote snapshots (attempt #$attempt)"

                update_snapshots $dataset $target_path

                # on the off chance that we failed to update the snapshots again,
                # sleep 10 seconds so that each attempt is made 10 seconds apart
                sleep 10
            fi
        done

        local snapshot_output=$(zfs snapshot $dataset@shadow.$zshadow_tag.delta 2>&1)

        if [ $? != 0 ]
        then
            # despite trying to clean up any left over snapshots, we still
            # failed to create a snapshot. go ahead and abort for now, with the
            # hope that a later invocation of this script will have success
            err "  failed to create the delta snapshot '$dataset@shadow.$zshadow_tag.delta' - output: $snapshot_output"

            # move on to the next dataset
            continue
        fi

        log "    sending $dataset@shadow.$zshadow_tag.delta to $zshadow_tag_target"

        local send_output
        send_output=$(send_delta_to_target $dataset)

        if [ $? == 0 ]
        then
            log "    successfully sent $dataset@shadow.$zshadow_tag.delta, updating base snapshot"

            update_snapshots $dataset $target_path
        else
            err "    failed to send $dataset@shadow.$zshadow_tag.delta, destroying newly created delta snapshot - output: $send_output"

            # since we couldn't send it, just destroy it. If this
            # script gets invoked again the delta snapshot will just be recreated.
            zfs destroy $dataset@shadow.$zshadow_tag.delta
        fi
    fi

    log "  finished processing $dataset at $(date)"
}

update_snapshots()
{
    # process remote snapshots
    log "      destroying remote snapshot"
    local destroy_output
    destroy_output=$(destroy_target_base $2)

    if [ $? != 0 ]
    then
        err "      failed to destroy the remote snapshot - output: $destroy_output"
    else
        log "      renaming remote snapshot"
        local rename_output
        rename_output=$(rename_target_delta $2)

        if [ $? == 0 ]
        then
            # process local snapshots
            log "      destroying local snapshot"
            zfs destroy $1@shadow.$zshadow_tag >/dev/null 2>&1

            log "      renaming local snapshot"
            zfs rename $1@shadow.$zshadow_tag.delta $1@shadow.$zshadow_tag >/dev/null 2>&1
        else
            err "      failed to rename the remote snapshot - output: $rename_output"
        fi
    fi
}

destroy_target_snapshots()
{
    local snapshots output

    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            snapshots=$(ssh $zshadow_ssh_args zfs list -H -o name -d 1 -t snapshot "$1")

            [ -z "$snapshots" ] || output=$(ssh $zshadow_ssh_args "zfs destroy $snapshots")
            ;;
        *)
            ;;
    esac

    echo $output
}

create_target()
{
    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            ssh $zshadow_ssh_args zfs create "$1" > /dev/null 2>&1
            ;;
        *)
            ;;
    esac
}

send_base_to_target()
{
    local output ret dataset flags

    flags="-duv"
    dataset="$1"

    if [ "$1" == "-F" ]
    then
        flags="-duvF"
        dataset="$2"
    fi

    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            output=$(zfs send $dataset@shadow.$zshadow_tag | ssh $zshadow_ssh_args "zfs recv $flags $zshadow_tag_target" 2>&1)
            ret=$?
            ;;
        *)
            ;;
    esac

    echo $output

    return $ret
}

send_delta_to_target()
{
    local output ret

    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            output=$(zfs send -i shadow.$zshadow_tag $1@shadow.$zshadow_tag.delta | ssh $zshadow_ssh_args "zfs recv -duv $zshadow_tag_target" 2>&1)
            ret=$?
            ;;
        *)
            ;;
    esac

    echo $output

    return $ret
}

destroy_target_base()
{
    local output ret

    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            output=$(ssh $zshadow_ssh_args zfs destroy $1@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        *)
            ;;
    esac

    echo $output

    return $ret
}

rename_target_delta()
{
    local output ret

    case "$zshadow_tag_scheme" in
        local)
            ;;
        ssh)
            output=$(ssh $zshadow_ssh_args zfs rename $1@shadow.$zshadow_tag.delta $1@shadow.$zshadow_tag 2>&1)
            ret=$?
            ;;
        *)
            ;;
    esac

    echo $output

    return $ret
}

send_tag()
{
    local tag="$1"
    local dataset

    load_tag "$tag"

    [ $? == 0 ] || exerr "invalid tag configuration for '$tag'"

    lock "$tag" 

    if [ $? != 0 ]
    then
        log "zshadow is already sending '$tag', skipping"

        return 0
    fi

    local datasets=$(get_datasets_for_tag "$tag")

    for dataset in $datasets
    do
        echo "sending $dataset using tag $zshadow_tag and scheme $zshadow_tag_scheme"
        send_dataset "$dataset"
    done

    unlock "$tag"
}

load_tags()
{
    echo "$1" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9_\-]*$' || \
    if [ -z "$zshadow_tags" ]
    then
        zshadow_tags=$(zfs get -H -s local -t filesystem -o property all | grep '^zshadow:[a-zA-Z0-9][a-zA-Z0-9_\-]*\.cfg$' | sed -e 's/^zshadow:\([a-zA-Z0-9][a-zA-Z0-9_\-]*\)\.cfg$/\1/' | sort | uniq | tr '\n' ' ')
    fi
}

load_tag()
{
    if [ "$zshadow_tag" != "$1" ]
    then
        zshadow_tag="$1"
        zshadow_tag_cfg=$(zfs get -H -s local -o value zshadow:$1.cfg | head -n 1)

        parse_tag_cfg "$zshadow_tag_cfg"
    fi
}

check_tag()
{
    local check_tag="$1"
    local tag

    load_tags

    for tag in $zshadow_tags
    do
        if [ $check_tag == $tag ]
        then
            return 0
        fi
    done

    return 1
}

get_cfg_option()
{
    echo "$1" | grep -o "|$2=[^|]*|" | sed -e "s/|$2=\([^|]*\)|/\1/"
}

parse_tag_cfg()
{
    unset zshadow_ssh_args zshadow_ssh_gzip

    zshadow_tag_scheme=$(echo "$1" | sed -e 's/\([^|]*\)|.*/\1/')

    [ ! -z "$zshadow_tag_scheme" ] || return 1

    zshadow_tag_target=$(echo "$1" | sed -e "s/$zshadow_tag_scheme|\([^|]*\)|.*/\1/")

    [ ! -z "$zshadow_tag_target" ] || return 1

    case $zshadow_tag_scheme in
        local)
            ;;
        ssh)
            local host=$(get_cfg_option "$1" host)
            local port=$(get_cfg_option "$1" port)
            local user=$(get_cfg_option "$1" user)
            local gzip=$(get_cfg_option "$1" gzip)

            [ ! -z "$host" ] || return 1

            zshadow_ssh_args="$host"

            [ -z "$user" ] || zshadow_ssh_args=$(echo "$user@$zshadow_ssh_args")

            [ -z "$port" ] || zshadow_ssh_args=$(echo "$zshadow_ssh_args -p $port")

            [ "$gzip" == "yes" ] && zshadow_ssh_gzip="yes"
            ;;
        *)
            return 1
    esac

    return 0
}

get_datasets_for_tag()
{
    local tag="$1"

    zfs get -H -t filesystem -o name,value zshadow:$tag | grep '[[:space:]]send' | awk '{ print $1 }'
}

parse_tags()
{
    load_tags

    local tags=""

    if [ $# == 0 ]
    then
        tags=$zshadow_tags
    else
        while [ $# -gt 0 ]
        do
            check_tag "$1" || exerr "tag $1 does not exist"

            if [ -z "$tags" ]
            then
                tags="$1"
            else
                tags=$(echo "$tags $1")
            fi

            shift
        done
    fi

    echo $tags
}

lock()
{
    local pid=$(pgrep -F "/var/run/zshadow."$tag".pid" 2>/dev/null)

    if [ ! -z $pid ]
    then
        return 1
    fi

    echo $$ > "/var/run/zshadow."$tag".pid"

    return 0
}

unlock()
{
    rm "/var/run/zshadow."$tag".pid" >/dev/null 2>&1
    return 0
}

log()
{
    echo "$1"
    logger -t zshadow "$1"
}

err()
{
    ec=1
    log "_FAILURE_: $1"
}

exerr()
{
    echo -e "$*" >&2
    exit 1
}

usage()
{
    echo "usage: zshadow [-p port] [-h] dest_host local_dataset1:remote_dataset1 [local_dataset2:remote_dataset2] ..."
    echo " -p port: the ssh port to connect to on the remote host"
    echo " -h: print this help"
    echo " -v: print the version info"
    echo " dest_host: the destination host to receive the datasets from"
    echo " local_dataset1: the local dataset to replicate"
    echo " remote_dataset1: the place to replicate local_dataset1 to"
}

version()
{
    echo "zshadow version $version"
}

########## END FUNCTION DECLARATIONS ##########

case "$1" in
#
# create - create a tag and its properties
# update - change a tag and its properties
#
create|update)
    action="$1"
    shift

    if [ $# -lt 3 ]
    then
        usage
        exit 1
    fi

    echo "$1" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9_\-]*$' || \
        exerr "tag names can only contain a-z, 0-9, -, _ and must not start with - or _"

    tag="$1"
    options=""

    if [ "$action" == "create" ]
    then
        check_tag "$tag"

        [ $? != 0 ] || exerr "tag '$tag' already exists, did you mean 'update'?"
    else
        check_tag "$tag"

        [ $? == 0 ] || exerr "tag '$tag' does not exist, use 'create' to create it"

        lock "$tag" || exerr "tag '$tag' currently locked for sending"
    fi

    shift; while getopts :s:t:o: arg; do case ${arg} in 
      s) tag_scheme=${OPTARG};;
      t) tag_target=${OPTARG};; 
      o)
          echo ${OPTARG} | grep -Eq '^[a-zA-Z]+=[^|]+$'
          [ $? == 0 ] || exerr "a tag option must be of the form name=value, where value does not contain the '|' character"

          options=$(echo "$options${OPTARG}|")
          ;;
      ?) usage;; 
    esac; done; shift $(( ${OPTIND} - 1 ))

    [ ! -z "$tag_scheme" ] || \
        exerr "the scheme is requried (-s <scheme>)"

    [ ! -z "$tag_target" ] || \
        exerr "the target dataset is required (-t <target>)"

    tag_cfg="$tag_scheme|$tag_target|$options"

    parse_tag_cfg "$tag_cfg"

    [ $? == 0 ] || exerr "invalid options list for $tag_scheme"

    # when creating a new tag, add the tag properties to every pool
    # so it's a global property regardless of what pools are connected
    all_pools=$(zpool list -H -o name)

    echo "creating $tag"
    zfs set zshadow:$tag.cfg=$tag_cfg $all_pools > /dev/null 2>&1

    [ $? == 0 ] || exerr "failed to create tag $tag"

    ;;

#
# delete - delete a tag
#
delete)
    shift

    if [ $# != 1 ]
    then
        usage
        exit 1
    fi

    tag="$1"

    check_tag "$tag" || exerr "tag '$tag' does not exist"

    lock "$tag" || exerr "tag '$tag' currently locked for sending"

    all_pools=$(zpool list -H -o name)

    zfs inherit zshadow:$tag.cfg $all_pools > /dev/null 2>&1

    [ $? == 0 ] || exerr "failed to remove tag configuration for $tag"

    all_sets=$(zfs get -H -s local -o name zshadow:$tag)

    if [ ! -z "$all_sets" ]
    then
        zfs inherit zshadow:$tag $all_sets > /dev/null 2>&1

        [ $? == 0 ] || exerr "failed to remove tag $tag"
    fi

    all_snaps=$(zfs list -H -t snapshot -o name | grep "@shadow.$tag$")

    for snap in $all_snaps
    do
        zfs destroy $snap > /dev/null 2>&1
    done

    ;;

#
# tag - tag a dataset for sending
#
tag)
    shift

    [ $# -gt 1 ] || exerr "usage: zshadow tag <dataset> <tag>"

    dataset="$1"
    tag="$2"

    check_tag "$tag"

    [ $? == 0 ] || exerr "tag '$tag' not found"

    zfs list -H -o name "$dataset" > /dev/null 2>&1

    [ $? == 0 ] || exerr "dataset '$dataset' not found"

    shift; shift;

    tag_mode='send'

    while getopts :m: arg; do case ${arg} in 
      m)
          case "${OPTARG}" in
              send)
                  tag_mode='send'
                  ;;
              ignore)
                  tag_mode='ignore'
                  ;;
              *)
                  usage
                  exit 1;
          esac
            ;;
      *)
          usage
          exit 1;
          ;;
    esac; done; shift $(( ${OPTIND} - 1 ))


    zfs set "zshadow:$tag=$tag_mode" "$dataset" > /dev/null 2>&1

    [ $? == 0 ] || exerr "failed to tag dataset '$dataset' with '$tag'"

    ;;

#
# list - list all tags
#
list)
    shift

    list_tags=$(parse_tags $@)

    [ $? == 0 ] || exit 1

    max_tag_len=0
    max_ds_len=0

    for tag in $list_tags
    do
        tag_len=$(echo "$tag" | wc -c | tr -s ' ')

        [ $tag_len -lt $max_tag_len ] || max_tag_len=$tag_len

        datasets=$(get_datasets_for_tag $tag)

        for dataset in $datasets
        do
            ds_len=$(echo "$dataset" | wc -c | tr -s ' ')

            [ $ds_len -lt $max_ds_len ] || max_ds_len=$ds_len
        done
    done

    printf "%-${max_tag_len}s  %-${max_ds_len}s\n" 'TAG' 'DATASET'

    for tag in $list_tags
    do
        datasets=$(get_datasets_for_tag $tag)

        [ ! -z "$datasets" ] || printf "%-${max_tag_len}s  -\n" $tag

        for dataset in $datasets
        do
            printf "%-${max_tag_len}s  %-${max_ds_len}s\n" $tag $dataset
        done
    done
    ;;
#
# send - send datasets somewhere
#
send)
    shift

    send_tags=$(parse_tags $@)

    [ $? == 0 ] || exit 1

    log "started processing datasets at $(date)"

    for tag in $send_tags
    do
        send_tag $tag
    done

    log "finished processing datasets at $(date)"
    ;;

#
# error - unrecognized command
#
*)
    usage
    ;;
esac


exit $ec
